use crate::action_result_enum::ActionResult;use crate::constants;use crate::search_type_enum::SearchType;use ragit_types::{Uid, Chunk};impl ActionResult {    pub fn render_search(r#type: &SearchType, keyword: &str, chunks: &Vec<Chunk>) -> String {        if chunks.is_empty() {            match r#type {                SearchType::Exact => format!("{} {}", constants::RENDER_SEARCH_EXACT_NO_MATCH, keyword),                SearchType::Tfidf => format!("{} {}", constants::RENDER_SEARCH_TFIDF_NO_MATCH, keyword)            }        }        else {            let header = format!("{} {} {}", constants::RENDER_SEARCH_HEADER, match r#type { SearchType::Exact => constants::RENDER_SEARCH_EXACT_HEADER, SearchType::Tfidf => constants::RENDER_SEARCH_TFIDF_HEADER, }, keyword,);            format!("{} {} {}", constants::RENDER_SEARCH_RESULT, header, chunks.iter().enumerate().map(                    |(index, chunk)| format!("{} {} {} {} {}", constants::RENDER_SEARCH_RESULT_CHUNK, index + 1, chunk.render_source(), chunk.uid.abbrev(9), chunk.summary,)).collect::<Vec<_>>().join("\n\n"))        }    }}