use anyhow::Result;
use std::path::PathBuf;
use text_splitter::{TextSplitter, Characters};
use std::fs;
use ragit_types::build_config::BuildConfig;
use ragit_index_types::index_struct::Index;
use ragit_memory_monitor::MemoryMonitor;
use super::add_chunk_to_index::add_chunk_to_index;

pub fn process_staged_file(
    file_path_buf: &PathBuf,
    splitter: &TextSplitter<Characters>,
    build_config: &BuildConfig,
    index: &mut Index,
    memory_monitor: &mut MemoryMonitor,
) -> Result<()> {
    memory_monitor.verbose(&format!("Processing file: {:?}", file_path_buf));
    let content = fs::read_to_string(file_path_buf)?;
    memory_monitor.verbose(&format!("File size: {} bytes", content.len()));
    memory_monitor.verbose(&format!("Content length: {}", content.len()));
    memory_monitor.verbose(&format!("Chunk size: {}", build_config.chunk_size));
    let chunks: Vec<&str> = splitter.chunks(&content, build_config.chunk_size).collect();
    memory_monitor.verbose(&format!("Number of chunks generated by splitter for file {:?}: {}", file_path_buf, chunks.len()));
    let file_path_str = file_path_buf.to_string_lossy().to_string();
    let mut chunk_index = 0;
    for chunk_data in chunks {
        add_chunk_to_index(index, memory_monitor, chunk_data, &file_path_str, chunk_index);
        chunk_index += 1;
    }
    Ok(())
}
